{"version":3,"file":"static/js/338.81ebaed2.chunk.js","mappings":"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","sources":["webpack://classifier/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/CompleteRegistrationForm/CompleteRegistrationForm.jsx","pages/CompleteRegistrationPage/CompleteRegistrationPage.jsx","components/RegistrationForm/RegisterForm.styled.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"RegistrationForm_formWrapper__9O7CZ\",\"form\":\"RegistrationForm_form__c8X43\",\"inputWrapper\":\"RegistrationForm_inputWrapper__GNlbh\",\"label\":\"RegistrationForm_label__zrkEU\",\"input\":\"RegistrationForm_input__EgGQR\",\"submitBtn\":\"RegistrationForm_submitBtn__12JmY\",\"loginBtn\":\"RegistrationForm_loginBtn__WMC6w\"};","import React, { useEffect, useContext } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { authContext as context } from \"../../context/authContext\";\nimport { token } from \"../../services/api\";\n\nimport { Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport { validationColor } from \"../../services/utility\";\nimport { Button } from \"../Button/Button\";\nimport css from \"../RegistrationForm/RegistrationForm.module.css\";\nimport {\n  StyledForm,\n  Input,\n  InputWrapper,\n  ErrorMessageStyled,\n  FormButtonWrapper,\n} from \"../RegistrationForm/RegisterForm.styled\";\n\nconst CompleteRegistrationForm = () => {\n  // const [token, setTokenState] = useState(null);\n  const { onCompleteRegistration, setToken } = useContext(context);\n  const { userId } = useParams();\n  const location = useLocation();\n\n  const initialValues = {\n    lastName: \"\",\n    company: \"\",\n    jobRole: \"\",\n    phone: \"\",\n  };\n\n  const registerSchema = yup.object().shape({\n    lastName: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    company: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    jobRole: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    phone: yup\n      .string()\n      .matches(/^\\d+$/, \"Invalid phone number\") // Перевірка на наявність тільки цифр\n      .min(10, \"Too short phone number\") // Мінімальна довжина номера\n      .max(15, \"Too long phone number\") // Максимальна довжина номера\n      .required(\"Required\"), // Обов'язкове поле\n  });\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const tokenParam = searchParams.get(\"token\");\n    console.log(\"tokenParam: \", tokenParam);\n\n    if (tokenParam) {\n      setToken(tokenParam);\n      token.set(tokenParam);\n      // setTokenState(tokenParam);\n    }\n  }, [location, setToken]);\n\n  const handleSubmit = (values, actions) => {\n    // console.log(\"actions: \", actions);\n    // console.log(\"values: \", values);\n    const { resetForm } = actions;\n\n    const userCredentials = {\n      userId: userId,\n      ...values,\n    };\n\n    // Передача даних в контекст (глобальний стейт)\n    onCompleteRegistration(userCredentials);\n\n    // Очистка форми\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        {(props) => (\n          <StyledForm>\n            <h2>Complete registration</h2>\n\n            <InputWrapper>\n              <label htmlFor=\"lastName\" className={css.label}>\n                Last Name\n              </label>\n              <Input\n                name=\"lastName\"\n                type=\"text\"\n                id=\"lastName\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.lastName,\n                  props.values.lastName,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"lastName\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"company\" className={css.label}>\n                Company\n              </label>\n              <Input\n                name=\"company\"\n                type=\"text\"\n                id=\"company\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.company,\n                  props.values.company,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"company\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"jobRole\" className={css.label}>\n                Job Role\n              </label>\n              <Input\n                name=\"jobRole\"\n                type=\"text\"\n                id=\"jobRole\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.jobRole,\n                  props.values.jobRole,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"jobRole\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"phone\" className={css.label}>\n                Phone\n              </label>\n              <Input\n                name=\"phone\"\n                type=\"phone\"\n                id=\"phone\"\n                bordercolor={validationColor(\n                  props.errors.phone,\n                  props.values.phone,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"phone\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n\n            <FormButtonWrapper>\n              <Button type=\"submit\">Send</Button>\n            </FormButtonWrapper>\n          </StyledForm>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default CompleteRegistrationForm;\n","import React from \"react\";\nimport Section from \"../../components/Section/Section\";\nimport CompleteRegistrationForm from \"../../components/CompleteRegistrationForm/CompleteRegistrationForm\";\n\nconst CompleteRegistrationPage = () => {\n  return (\n    <Section>\n      <CompleteRegistrationForm />\n    </Section>\n  );\n};\n\nexport default CompleteRegistrationPage;\n","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\nimport { Form, Field } from \"formik\";\n\nexport const StyledForm = styled(Form)`\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: center;\n`;\n\nexport const InputWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nexport const Input = styled(Field)`\n  background-color: ${(props) => props.theme.colors.backgroundWhite};\n  border: ${(props) => props.theme.borders.bold};\n  border-color: ${({ bordercolor }) => bordercolor};\n  border-radius: ${(props) => props.theme.radii.normal};\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.5;\n  letter-spacing: -0.02em;\n  /* padding: 12px 12px 12px 40px; */\n  padding: 4px;\n  color: ${(props) => props.theme.colors.black};\n\n  @media screen and (min-width: 480px) {\n    font-size: 14px;\n    padding: 8px;\n  }\n\n  &:hover,\n  &:focus {\n    border: ${(props) => props.theme.borders.bold};\n    /* background-color: ${(props) => props.theme.colors.backgroundWhite}; */\n    border-color: ${({ bordercolor }) => bordercolor};\n  }\n`;\n\nexport const StyledLink = styled(NavLink)`\n  &:hover,\n  &:focus {\n    color: ${(props) => props.theme.colors.hover};\n  }\n`;\n\nexport const ErrorMessageStyled = styled.div`\n  color: ${(props) => props.theme.colors.invalid};\n  position: absolute;\n  right: 0;\n`;\n\nexport const FormButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding-top: 10px;\n  padding-bottom: 20px;\n  @media screen and (min-width: 480px) {\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n`;\n"],"names":["CompleteRegistrationForm","onCompleteRegistration","setToken","useContext","context","userId","useParams","location","useLocation","registerSchema","yup","shape","lastName","min","max","required","company","jobRole","phone","matches","useEffect","tokenParam","URLSearchParams","search","get","console","log","token","set","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","handleSubmit","values","actions","resetForm","userCredentials","props","_jsxs","StyledForm","InputWrapper","htmlFor","className","css","label","Input","name","type","id","bordercolor","validationColor","errors","ErrorMessage","render","msg","ErrorMessageStyled","FormButtonWrapper","Button","CompleteRegistrationPage","Section","styled","Form","div","Field","theme","colors","backgroundWhite","borders","bold","_ref","radii","normal","black","_ref2","StyledLink","NavLink","hover","invalid"],"sourceRoot":""}