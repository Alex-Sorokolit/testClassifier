{"version":3,"file":"static/js/44.e9975138.chunk.js","mappings":"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","sources":["webpack://classifier/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/RegistrationForm/RegisterForm.styled.js","components/RegistrationForm/RegistrationForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"RegistrationForm_formWrapper__9O7CZ\",\"form\":\"RegistrationForm_form__c8X43\",\"inputWrapper\":\"RegistrationForm_inputWrapper__GNlbh\",\"label\":\"RegistrationForm_label__zrkEU\",\"input\":\"RegistrationForm_input__EgGQR\",\"submitBtn\":\"RegistrationForm_submitBtn__12JmY\",\"loginBtn\":\"RegistrationForm_loginBtn__WMC6w\"};","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\nimport { Form, Field } from \"formik\";\n\nexport const StyledForm = styled(Form)`\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: center;\n`;\n\nexport const InputWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nexport const Input = styled(Field)`\n  background-color: ${(props) => props.theme.colors.backgroundWhite};\n  border: ${(props) => props.theme.borders.bold};\n  border-color: ${({ bordercolor }) => bordercolor};\n  border-radius: ${(props) => props.theme.radii.normal};\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.5;\n  letter-spacing: -0.02em;\n  /* padding: 12px 12px 12px 40px; */\n  padding: 4px;\n  color: ${(props) => props.theme.colors.black};\n\n  @media screen and (min-width: 480px) {\n    font-size: 14px;\n    padding: 8px;\n  }\n\n  &:hover,\n  &:focus {\n    border: ${(props) => props.theme.borders.bold};\n    /* background-color: ${(props) => props.theme.colors.backgroundWhite}; */\n    border-color: ${({ bordercolor }) => bordercolor};\n  }\n`;\n\nexport const StyledLink = styled(NavLink)`\n  &:hover,\n  &:focus {\n    color: ${(props) => props.theme.colors.hover};\n  }\n`;\n\nexport const ErrorMessageStyled = styled.div`\n  color: ${(props) => props.theme.colors.invalid};\n  position: absolute;\n  right: 0;\n`;\n\nexport const FormButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding-top: 10px;\n  padding-bottom: 20px;\n  @media screen and (min-width: 480px) {\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n`;\n","import React, { useContext } from \"react\";\nimport { authContext as context } from \"../../context/authContext\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport { validationColor } from \"../../services/utility\";\nimport { Button } from \"../Button/Button\";\nimport css from \"./RegistrationForm.module.css\";\nimport {\n  StyledForm,\n  Input,\n  InputWrapper,\n  StyledLink,\n  ErrorMessageStyled,\n  FormButtonWrapper,\n} from \"./RegisterForm.styled\";\n\nconst RegistrationForm = () => {\n  const { onRegister } = useContext(context);\n\n  const initialValues = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  };\n\n  const registerSchema = yup.object().shape({\n    name: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    lastName: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    company: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    jobRole: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    email: yup.string().email(\"Invalid email\").required(\"Required\"),\n    phone: yup\n      .string()\n      .matches(/^\\d+$/, \"Invalid phone number\") // Перевірка на наявність тільки цифр\n      .min(10, \"Too short phone number\") // Мінімальна довжина номера\n      .max(15, \"Too long phone number\") // Максимальна довжина номера\n      .required(\"Required\"), // Обов'язкове поле\n    password: yup\n      .string()\n      .min(6, \"Your password is short\")\n      .max(16, \"Your password is to long\")\n      .matches(/[1-9]/, \"Your password is little secure. Add a number!\")\n      .matches(\n        /[a-zа-яA-ZА-ЯіїЇІєЄ]/,\n        \"Your password is little secure. Add a letter!\"\n      )\n      .matches(/^[a-zа-яA-ZА-ЯіїЇІЄє1-9]/, \"Enter a valid Password*\")\n      .required(\"Enter a Password*\"),\n  });\n\n  const handleSubmit = (values, actions) => {\n    // console.log(\"actions: \", actions);\n    // console.log(\"values: \", values);\n    const { resetForm } = actions;\n\n    // Передача даних в контекст (глобальний стейт)\n    onRegister(values);\n\n    // Очистка форми\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        {(props) => (\n          <StyledForm>\n            <h2>Registration</h2>\n            <InputWrapper>\n              <label htmlFor=\"name\" className={css.label}>\n                Name\n              </label>\n              <Input\n                name=\"name\"\n                type=\"text\"\n                id=\"name\"\n                autoFocus\n                bordercolor={validationColor(\n                  props.errors.name,\n                  props.values.name,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"name\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"lastName\" className={css.label}>\n                Last Name\n              </label>\n              <Input\n                name=\"lastName\"\n                type=\"text\"\n                id=\"lastName\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.lastName,\n                  props.values.lastName,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"lastName\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"company\" className={css.label}>\n                Company\n              </label>\n              <Input\n                name=\"company\"\n                type=\"text\"\n                id=\"company\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.company,\n                  props.values.company,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"company\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"jobRole\" className={css.label}>\n                Job Role\n              </label>\n              <Input\n                name=\"jobRole\"\n                type=\"text\"\n                id=\"jobRole\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.jobRole,\n                  props.values.jobRole,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"jobRole\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"phone\" className={css.label}>\n                Phone\n              </label>\n              <Input\n                name=\"phone\"\n                type=\"phone\"\n                id=\"phone\"\n                bordercolor={validationColor(\n                  props.errors.phone,\n                  props.values.phone,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"phone\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"email\" className={css.label}>\n                Email\n              </label>\n              <Input\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                bordercolor={validationColor(\n                  props.errors.email,\n                  props.values.email,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"email\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"password\" className={css.label}>\n                Password\n              </label>\n              <Input\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                bordercolor={validationColor(\n                  props.errors.password,\n                  props.values.password,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <FormButtonWrapper>\n              <Button type=\"submit\">Send</Button>\n              <StyledLink to={\"/login\"}>LogIn</StyledLink>\n            </FormButtonWrapper>\n          </StyledForm>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default RegistrationForm;\n","import React from \"react\";\nimport Section from \"../../components/Section/Section\";\nimport RegistrationForm from \"../../components/RegistrationForm/RegistrationForm\";\n\nconst RegisterPage = () => {\n  return (\n    <Section>\n      <RegistrationForm />\n    </Section>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["StyledForm","styled","Form","InputWrapper","div","Input","Field","props","theme","colors","backgroundWhite","borders","bold","_ref","bordercolor","radii","normal","black","_ref2","StyledLink","NavLink","hover","ErrorMessageStyled","invalid","FormButtonWrapper","RegistrationForm","onRegister","useContext","context","registerSchema","yup","shape","name","min","max","required","lastName","company","jobRole","email","phone","matches","password","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","handleSubmit","values","actions","resetForm","_jsxs","htmlFor","className","css","label","type","id","autoFocus","validationColor","errors","ErrorMessage","render","msg","Button","to","RegisterPage","Section"],"sourceRoot":""}